from geometor.utils import *
from geometor.model import *
from geometor.render import *
from geometor.pappus import *
from itertools import permutations

sp.init_printing()

NAME = 'root5'
log_init(NAME)
# add starting points
start_time = timer()

begin()

# find perps for square
bisector(pts[0], pts[1])
bisector(pts[0], pts[3])
bisector(pts[1], pts[2])

# squares
add_element(line(pts[18], pts[32]))
add_element(line(pts[17], pts[31]))
#  add_polygon(polygon_ids([0, 1, 18, 32]))
#  add_polygon(polygon_ids([0, 1, 17, 31]))

# root5 diagonal
c = add_element(circle(pts[6], pts[18], classes=['gold']))

# outer goldens
#  el = add_element(circle(pts[0], pts[38], classes=['gold']))
#  el = add_element(circle(pts[1], pts[37], classes=['gold']))

#  pentagon = polygon_ids([0, 1, 47, 49, 63])
#  add_polygon(pentagon)
#  pentagon = polygon_ids([0, 1, 48, 50, 64])
#  add_polygon(pentagon)

# inner goldens
#  el = add_element(circle(pts[0], pts[37], classes=['gold']))
#  el = add_element(circle(pts[1], pts[38], classes=['gold']))

# diagonals
#  add_element(line(pts[18], pts[31]))
#  add_element(line(pts[17], pts[32]))

# inner cross
#top
#  add_element(line(pts[127], pts[108]))
#  add_element(line(pts[121], pts[105]))

# bottom
#  add_element(line(pts[55], pts[68]))
# left
#  add_element(line(pts[101], pts[85]))
# right
#  add_element(line(pts[56], pts[68]))

print(f'Build: {elapsed(start_time)}')
print()
print(f'elements: {len(elements)}')
print(f'  points: {len(pts)}')

# plot *******************
fig, ax = plt.subplots()
ax.set_aspect('equal')
#  limx, limy = (-2, 2), (-1.5, 1.5)
limx, limy = get_limits_from_points(pts)
#  if limx:
   #  ax.set_xlim(limx[0], limx[1])
#  if limy:
   #  ax.set_ylim(limy[0], limy[1])
bounds = set_bounds(limx, limy)

title = f'G E O M E T O R'
#  ax.set_title(title, fontdict={'color': '#960', 'size':'small'})
fig.suptitle(title, fontdict={'color': '#960', 'size':'small'})

ax.axis(False)
plt.tight_layout()

#  plot_sequence(ax, history, bounds)
#  plt.show()
#  build_sequence(NAME, ax, history, bounds)

lines = [el for el in elements if isinstance(el, spg.Line2D)]
sections = []
sections = analyze_golden_lines(lines)

print()
print('Golden Sections found:', len(sections))

for i, section in enumerate(sections):
    print(i, section)
    num = str(i).zfill(3)
    ax.clear()
    ax.axis(False)
    plt.tight_layout()
    section_pts = set()
    for seg in section:
        for pt in seg.points:
            #  pt.classes = ['goldpt']
            section_pts.add(pt)
    gold_points(ax, section_pts)
    plot_sequence(ax, history, bounds)
    plot_segments(ax, section)
    snapshot(f'{NAME}/sections', f'{num}.png')

plt.show()
